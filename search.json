[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "자료구조",
    "section": "",
    "text": "들어가기",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>들어가기</span>"
    ]
  },
  {
    "objectID": "index.html#자료구조란-무엇인가",
    "href": "index.html#자료구조란-무엇인가",
    "title": "자료구조",
    "section": "자료구조란 무엇인가?",
    "text": "자료구조란 무엇인가?\n\n자료구조의 정의와 중요성\n자료구조와 알고리즘의 관계\n자료구조 선택의 기준",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>들어가기</span>"
    ]
  },
  {
    "objectID": "index.html#배열-array",
    "href": "index.html#배열-array",
    "title": "자료구조",
    "section": "배열 (Array)",
    "text": "배열 (Array)\n\n배열의 개념과 구조\n배열의 특징\n\n고정 크기\n인덱스를 통한 접근\n\n배열의 종류\n\n1차원 배열\n2차원 배열\n다차원 배열\n\n배열의 기본 연산\n\n삽입\n삭제\n검색\n수정\n\n배열의 장단점\n배열 사용 예제",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>들어가기</span>"
    ]
  },
  {
    "objectID": "index.html#연결-리스트-linked-list",
    "href": "index.html#연결-리스트-linked-list",
    "title": "자료구조",
    "section": "연결 리스트 (Linked List)",
    "text": "연결 리스트 (Linked List)\n\n연결 리스트의 개념과 구조\n연결 리스트의 종류\n\n단일 연결 리스트\n이중 연결 리스트\n환형 연결 리스트\n\n연결 리스트의 기본 연산\n\n삽입\n삭제\n검색\n\n배열과 연결 리스트의 비교\n연결 리스트 사용 예제",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>들어가기</span>"
    ]
  },
  {
    "objectID": "index.html#스택-stack",
    "href": "index.html#스택-stack",
    "title": "자료구조",
    "section": "스택 (Stack)",
    "text": "스택 (Stack)\n\n스택의 개념과 구조\nLIFO(Last In First Out) 원리\n스택의 기본 연산\n\npush (삽입)\npop (삭제)\npeek (조회)\n\n스택의 활용 사례\n\n괄호 검사\n함수 호출 관리 (콜 스택)\n\n배열과 연결 리스트로 구현하는 스택\n스택 사용 예제",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>들어가기</span>"
    ]
  },
  {
    "objectID": "index.html#큐-queue",
    "href": "index.html#큐-queue",
    "title": "자료구조",
    "section": "큐 (Queue)",
    "text": "큐 (Queue)\n\n큐의 개념과 구조\nFIFO(First In First Out) 원리\n큐의 종류\n\n일반 큐\n원형 큐\n덱(Deque, 양방향 큐)\n우선순위 큐\n\n큐의 기본 연산\n\nenqueue (삽입)\ndequeue (삭제)\npeek (조회)\n\n큐의 활용 사례\n\n프로세스 스케줄링\n데이터 스트림 처리\n\n배열과 연결 리스트로 구현하는 큐\n큐 사용 예제",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>들어가기</span>"
    ]
  },
  {
    "objectID": "index.html#트리-tree",
    "href": "index.html#트리-tree",
    "title": "자료구조",
    "section": "트리 (Tree)",
    "text": "트리 (Tree)\n\n트리의 개념과 구조\n트리의 기본 용어\n\n노드, 루트, 리프, 부모/자식 노드, 서브트리\n\n이진 트리와 이진 탐색 트리\n트리 순회 방법\n\n전위 순회\n중위 순회\n후위 순회\n\n균형 트리 (AVL 트리, 레드-블랙 트리)\n힙(Heap)과 힙 정렬\n트리의 활용 사례\n\n폴더 구조\n데이터베이스 인덱싱\n\n트리 사용 예제",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>들어가기</span>"
    ]
  },
  {
    "objectID": "index.html#그래프-graph",
    "href": "index.html#그래프-graph",
    "title": "자료구조",
    "section": "그래프 (Graph)",
    "text": "그래프 (Graph)\n\n그래프의 개념과 구조\n그래프의 기본 용어\n\n정점(Vertex), 간선(Edge)\n방향 그래프와 무방향 그래프\n가중치 그래프\n\n그래프 표현 방법\n\n인접 행렬\n인접 리스트\n\n그래프 탐색 알고리즘\n\n깊이 우선 탐색(DFS)\n너비 우선 탐색(BFS)\n\n최소 신장 트리 (MST)\n\n크루스칼 알고리즘\n프림 알고리즘\n\n최단 경로 알고리즘\n\n다익스트라 알고리즘\n플로이드-워셜 알고리즘\n\n그래프의 활용 사례\n\n네트워크 경로 찾기\n소셜 네트워크 분석\n\n그래프 사용 예제",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>들어가기</span>"
    ]
  },
  {
    "objectID": "index.html#자료구조-비교-및-선택-기준",
    "href": "index.html#자료구조-비교-및-선택-기준",
    "title": "자료구조",
    "section": "자료구조 비교 및 선택 기준",
    "text": "자료구조 비교 및 선택 기준\n\n상황별 자료구조 선택 가이드\n시간 복잡도와 공간 복잡도 비교",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>들어가기</span>"
    ]
  },
  {
    "objectID": "index.html#자료구조-실전-문제",
    "href": "index.html#자료구조-실전-문제",
    "title": "자료구조",
    "section": "9. 자료구조 실전 문제",
    "text": "9. 자료구조 실전 문제\n\n기본 개념 복습 문제\n단계별 실습 문제\n응용 및 심화 문제",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>들어가기</span>"
    ]
  },
  {
    "objectID": "index.html#부록",
    "href": "index.html#부록",
    "title": "자료구조",
    "section": "10. 부록",
    "text": "10. 부록\n\n빅오 표기법(Big-O Notation) 설명\n참고할 만한 추가 자료 및 학습 사이트",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>들어가기</span>"
    ]
  },
  {
    "objectID": "00datastructure.html",
    "href": "00datastructure.html",
    "title": "자료구조란 무엇인가?",
    "section": "",
    "text": "자료구조의 정의와 중요성\n자료구조(Data Structure)란 데이터를 효율적으로 저장하고, 관리하며, 처리하기 위한 방법과 그 구조를 의미한다. 즉, 데이터를 특정한 방식으로 조직화하여 필요한 작업(삽입, 삭제, 검색 등)을 쉽게 수행할 수 있도록 하는 체계이다.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>자료구조란 무엇인가?</span>"
    ]
  },
  {
    "objectID": "00datastructure.html#자료구조의-정의와-중요성",
    "href": "00datastructure.html#자료구조의-정의와-중요성",
    "title": "자료구조란 무엇인가?",
    "section": "",
    "text": "자료구조의 중요성\n\n효율적인 데이터 관리\n프로그램에서 데이터를 효과적으로 저장하고, 필요한 정보를 빠르게 찾아 사용할 수 있도록 한다. 예를 들어, 전화번호부에서 사람의 이름으로 번호를 찾는 경우 배열보다는 트리 구조를 사용하는 것이 더 빠를 수 있다.\n예제: 전화번호부 검색 배열을 사용해 이름과 전화번호를 저장할 수 있지만, 검색 속도가 느리다. 대신 이진 탐색 트리(Binary Search Tree)를 사용하면 이름을 기준으로 데이터를 정렬하여 검색 속도를 빠르게 할 수 있다. 예를 들어, 1000명의 이름 중 특정 이름을 찾을 때, 배열은 최대 1000번의 비교가 필요하지만, 이진 탐색 트리는 약 10번의 비교로 찾을 수 있다.\n성능 최적화\n잘 설계된 자료구조는 프로그램의 실행 속도와 메모리 사용량을 최적화할 수 있다. 같은 문제라도 어떤 자료구조를 사용하느냐에 따라 실행 시간이 크게 달라질 수 있다.\n예제: 대용량 데이터 검색\n대규모 데이터셋(예: 수백만 개의 사용자 정보)에서 특정 사용자를 검색할 때, 해시 테이블(Hash Table)을 사용하면 검색 속도가 평균적으로 O(1)에 수렴하여 매우 빠르다. 반면, 배열이나 연결 리스트를 사용하면 O(n)의 시간이 소요되어 성능이 저하된다. 예를 들어, 해시 테이블을 사용한 사전(dictionary) 검색은 거의 즉각적인 결과를 제공한다.\n복잡한 문제 해결\n복잡한 문제를 단순하게 표현하고 해결할 수 있는 도구로 사용된다. 예를 들어, 그래프 자료구조를 이용하면 소셜 네트워크 분석이나 경로 탐색 같은 복잡한 문제를 효율적으로 해결할 수 있다.\n예제: 최단 경로 찾기\n도시 간의 최단 경로를 찾는 문제에서 그래프(Graph) 자료구조를 사용하여 도시(정점)와 도로(간선)를 표현할 수 있다. 그런 다음, 다익스트라 알고리즘(Dijkstra’s Algorithm)을 활용하여 출발지에서 목적지까지의 최단 경로를 효율적으로 계산할 수 있다. 이 방법은 네비게이션 시스템에서 주로 사용된다.\n재사용성과 유지보수성 향상\n자료구조는 코드의 가독성을 높이고, 유지보수를 쉽게 만들어준다. 잘 설계된 자료구조는 다양한 프로그램에서 재사용할 수 있다.\n예제: 웹 브라우저의 뒤로 가기 기능\n웹 브라우저에서 방문한 페이지의 기록을 저장하는 데 스택(Stack) 자료구조를 사용하면, ‘뒤로 가기’ 버튼을 클릭할 때 마지막에 방문한 페이지부터 순차적으로 이전 페이지로 돌아갈 수 있다. 이 구조는 다른 프로그램(예: 텍스트 편집기의 실행 취소 기능)에서도 쉽게 재사용할 수 있다. 스택을 사용하면 기능을 추가하거나 수정하는 것도 간단하다.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>자료구조란 무엇인가?</span>"
    ]
  },
  {
    "objectID": "00datastructure.html#자료구조와-알고리즘의-관계",
    "href": "00datastructure.html#자료구조와-알고리즘의-관계",
    "title": "자료구조란 무엇인가?",
    "section": "자료구조와 알고리즘의 관계",
    "text": "자료구조와 알고리즘의 관계\n알고리즘(Algorithm)은 문제를 해결하기 위한 일련의 절차나 방법을 의미하며, 자료구조는 이 알고리즘이 데이터를 효율적으로 처리할 수 있도록 돕는 도구이다. 이 둘은 밀접한 관계를 가지며, 상호 보완적으로 작동한다.\n\n관계의 핵심\n\n자료구조는 데이터를 저장, 알고리즘은 데이터를 처리\n자료구조는 데이터를 어떻게 저장하고 조직화할지 결정하며, 알고리즘은 그 데이터를 어떻게 처리하고 조작할지를 결정한다. 예를 들어, 정렬 알고리즘은 배열이나 리스트 같은 자료구조에 저장된 데이터를 기준으로 동작한다.\n자료구조에 따라 알고리즘의 효율성이 달라짐\n같은 문제라도 어떤 자료구조를 선택하느냐에 따라 알고리즘의 성능이 달라진다. 예를 들어, 검색 문제를 해결할 때, 배열을 사용하면 선형 탐색(linear search)을 해야 하지만, 이진 탐색 트리를 사용하면 훨씬 더 빠르게 검색할 수 있다.\n알고리즘 설계 시 자료구조 고려\n알고리즘을 설계할 때 적절한 자료구조를 선택하는 것이 중요하다. 예를 들어, 깊이 우선 탐색(DFS) 알고리즘을 구현할 때 스택 자료구조를 활용하고, 너비 우선 탐색(BFS) 알고리즘은 큐 자료구조를 활용한다.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>자료구조란 무엇인가?</span>"
    ]
  },
  {
    "objectID": "00datastructure.html#자료구조-선택의-기준",
    "href": "00datastructure.html#자료구조-선택의-기준",
    "title": "자료구조란 무엇인가?",
    "section": "자료구조 선택의 기준",
    "text": "자료구조 선택의 기준\n효율적인 프로그램을 작성하기 위해서는 문제에 맞는 적절한 자료구조를 선택해야 한다. 자료구조 선택은 프로그램의 성능과 자원 사용에 큰 영향을 미친다.\n\n자료구조 선택 시 고려할 요소\n\n데이터의 크기와 형태\n저장해야 하는 데이터의 크기(고정 크기 또는 동적 크기)와 형태(단순한 값, 복합 구조 등)에 따라 자료구조를 선택해야 한다. 예를 들어, 고정된 크기의 데이터에는 배열이 적합하고, 크기가 자주 변하는 데이터에는 연결 리스트가 유용하다.\n데이터 접근 방식\n데이터에 얼마나 자주 접근하고, 어떤 방식으로 접근하는지가 중요하다.\n\n순차 접근이 필요한 경우 리스트나 큐가 적합하다.\n임의 접근(random access)이 필요하다면 배열이 유리하다.\n계층적 구조로 데이터를 관리해야 한다면 트리를 사용할 수 있다.\n\n삽입, 삭제, 검색의 빈도\n삽입, 삭제, 검색 작업의 빈도에 따라 자료구조를 선택한다.\n\n삽입과 삭제가 빈번한 경우 연결 리스트가 적합하다.\n빠른 검색이 필요하다면 해시 테이블이나 트리를 사용하는 것이 좋다.\n\n메모리 사용량\n사용할 수 있는 메모리의 제약에 따라 자료구조를 선택해야 한다. 예를 들어, 배열은 메모리를 연속적으로 할당하지만, 연결 리스트는 포인터를 사용하기 때문에 메모리 효율이 다르다.\n복잡도(시간 및 공간)\n자료구조가 제공하는 각 연산의 시간 복잡도와 공간 복잡도를 고려해야 한다. 아래 표는 주요 자료구조의 연산별 시간 복잡도를 비교한 것이다.\n\n\n\n자료구조\n접근 (Access)\n검색 (Search)\n삽입 (Insert)\n삭제 (Delete)\n\n\n\n\n배열\nO(1)\nO(n)\nO(n)\nO(n)\n\n\n연결 리스트\nO(n)\nO(n)\nO(1)\nO(1)\n\n\n스택\nO(n)\nO(n)\nO(1)\nO(1)\n\n\n큐\nO(n)\nO(n)\nO(1)\nO(1)\n\n\n해시 테이블\n-\nO(1)\nO(1)\nO(1)\n\n\n이진 탐색 트리\nO(log n)\nO(log n)\nO(log n)\nO(log n)\n\n\n\n문제의 특성과 요구사항\n문제의 특성과 요구사항(예: 실시간 데이터 처리, 대규모 데이터 처리)에 맞는 자료구조를 선택해야 한다. 예를 들어, 실시간 데이터 처리에는 큐나 덱(Deque), 우선순위 큐가 효과적이다.\n\n\n적절한 자료구조를 선택하는 것은 프로그램의 성능을 결정짓는 중요한 요소이며, 문제 해결의 효율성을 극대화하는 핵심적인 과정이다. 자료구조의 특성을 이해하고, 문제 상황에 맞는 최적의 구조를 선택하는 것이 중요하다.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>자료구조란 무엇인가?</span>"
    ]
  }
]