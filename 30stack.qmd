# 스택(Stack) {#sec-stack}

## 스택의 개념과 구조  

![스택](images/stack.png)

**스택(Stack)**은 데이터를 **쌓는 형태**로 저장하는 자료구조로, **LIFO(Last In First Out)** 원칙을 따른다. 즉, **가장 나중에 추가된 데이터가 가장 먼저 제거**되는 구조이다. 스택은 한쪽 끝에서만 데이터의 삽입과 삭제가 이루어지며, 이 끝 부분을 **Top(탑)**이라고 한다.

---

## LIFO (Last In First Out) 원리  

**LIFO**란 **마지막에 들어간 데이터가 가장 먼저 나온다**는 의미다.

실생활 예시
:  
- **접시 쌓기**: 가장 나중에 올린 접시를 먼저 꺼내는 방식
- **책 더미**: 가장 위에 놓인 책을 먼저 꺼내 읽는 방식

---

## 스택의 기본 연산

`push` (삽입)  
: - 스택의 **Top**에 새로운 데이터를 추가하는 연산

`pop` (삭제)  
: - 스택의 **Top**에 있는 데이터를 제거하고 반환하는 연산, 만약 스택이 비어있다면 오류를 발생

`peek` (조회)  
: - 스택의 **Top**에 있는 데이터를 제거하지 않고 확인하는 연산

---

## 스택의 파이썬 구현

### 리스트(List)를 이용한 스택 구현  
파이썬의 **리스트** 자료형을 사용하면 쉽게 스택을 구현할 수 있다.

```{python}
class Stack:
    def __init__(self):
        self.stack = []

    def push(self, data):
        self.stack.append(data)

    def pop(self):
        if self.is_empty():
            return "스택이 비어있습니다."
        return self.stack.pop()

    def peek(self):
        if self.is_empty():
            return "스택이 비어있습니다."
        return self.stack[-1]

    def is_empty(self):
        return len(self.stack) == 0

    def size(self):
        return len(self.stack)

# 사용 예제
s = Stack()
s.push(10)
s.push(20)
s.push(30)
print(s.peek())  # 출력: 30
print(s.pop())   # 출력: 30
print(s.pop())   # 출력: 20
print(s.peek())  # 출력: 10
```

---

## 스택의 활용 사례

### 괄호 검사 (문법 체크)  

스택은 **프로그래밍 언어의 괄호 짝 맞추기**와 같은 문제 해결에 유용하게 사용된다. 여는 괄호를 만나면 스택에 넣고, 닫는 괄호를 만나면 스택에서 꺼내어 짝이 맞는지 검사한다.

**파이썬 예제 코드**  
```{python}
def is_balanced(expression):
    stack = Stack()
    for char in expression:
        if char in "({[":
            stack.push(char)
        elif char in ")}]":
            if stack.is_empty():
                return False
            top = stack.pop()
            if not ((top == '(' and char == ')') or
                    (top == '{' and char == '}') or
                    (top == '[' and char == ']')):
                return False
    return stack.is_empty()

# 사용 예제
expr1 = "(a + b) * (c + d)"
expr2 = "(a + b * (c - d)"
print(is_balanced(expr1))  # 출력: True
print(is_balanced(expr2))  # 출력: False
```

---

### 함수 호출 관리 (콜 스택)  

프로그래밍 언어에서 **함수 호출 시** 호출된 함수와 복귀 위치를 관리하기 위해 **콜 스택(Call Stack)**을 사용한다.

**예제 설명**  
재귀 함수 호출 시, 스택을 통해 호출된 함수가 쌓이고, 가장 마지막 함수부터 실행이 완료된 후 차례로 이전 함수로 돌아간다.

```{python}
def factorial(n):
    if n == 1:
        return 1
    return n * factorial(n - 1)

# 사용 예제
print(factorial(5))  # 출력: 120
```
- **호출 스택 흐름**  
  ```
  factorial(5)
  factorial(4)
  factorial(3)
  factorial(2)
  factorial(1) → 반환 시작
  ```

---

## 배열과 연결 리스트로 구현하는 스택

| **구현 방법**          | **배열 (List)**                           | **연결 리스트**                           |
|---------------------|-----------------------------------------|------------------------------------------|
| **메모리 구조**        | 연속적인 메모리 공간                            | 비연속적인 메모리 공간                           |
| **삽입/삭제 속도**     | 리스트의 끝에서 삽입/삭제 시 O(1) 성능 유지               | 항상 O(1) 성능 유지                             |
| **메모리 효율성**      | 크기 조정이 필요할 때 리사이징으로 메모리 낭비 발생 가능         | 필요한 만큼 동적으로 메모리 할당                    |
| **구현 복잡도**        | 간단한 구현                                    | 포인터 관리로 인해 복잡도가 높음                       |

---

배열 기반 스택  
: - 리스트 기반으로 앞서 구현한 스택과 동일하다.

연결 리스트 기반 스택  
: - **연결 리스트의 Head** 부분을 스택의 Top으로 사용하여 구현할 수 있다.

```{python}
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedListStack:
    def __init__(self):
        self.head = None

    def push(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    def pop(self):
        if self.is_empty():
            return "스택이 비어있습니다."
        data = self.head.data
        self.head = self.head.next
        return data

    def peek(self):
        if self.is_empty():
            return "스택이 비어있습니다."
        return self.head.data

    def is_empty(self):
        return self.head is None

# 사용 예제
ll_stack = LinkedListStack()
ll_stack.push(100)
ll_stack.push(200)
print(ll_stack.peek())  # 출력: 200
print(ll_stack.pop())   # 출력: 200
print(ll_stack.pop())   # 출력: 100
```

---

## 스택 사용 예제

### 문자열 뒤집기  

스택의 LIFO 특성을 이용하여 문자열을 뒤집는 작업을 수행할 수 있다.

```{python}
def reverse_string(s):
    stack = Stack()
    for char in s:
        stack.push(char)
    
    reversed_str = ""
    while not stack.is_empty():
        reversed_str += stack.pop()
    
    return reversed_str

# 사용 예제
original = "hello"
print(reverse_string(original))  # 출력: olleh
```

---

### DFS(깊이 우선 탐색) 구현  

그래프 탐색 알고리즘 중 하나인 **DFS(Depth-First Search)**는 스택을 활용하여 구현할 수 있다.

```{mermaid}
graph TD
    A --> B
    A --> C
    B --> E
    B --> D
    C --> F
    E --> F
```

```{python}
def dfs(graph, start):
    visited = set()
    stack = Stack()
    stack.push(start)
    
    while not stack.is_empty():
        vertex = stack.pop()
        if vertex not in visited:
            print(vertex, end=' ')
            visited.add(vertex)
            for neighbor in reversed(graph[vertex]):  # 인접 노드 스택에 삽입
                stack.push(neighbor)

# 그래프 인접 리스트 표현
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

# 사용 예제
dfs(graph, 'A')  # 출력: A C F B E D
```

---

이처럼 스택은 간단하지만 매우 강력한 자료구조로, 다양한 알고리즘과 문제 해결에 활용된다. 특히 **재귀적 문제 해결, 문법 검사, 그래프 탐색** 등에서 필수적으로 사용된다.
